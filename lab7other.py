import socket
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BCM)

#LED Pin numbers and GPIO pins
led_pins = {'1': 2, '2': 3, '3': 4}
#Set initial pwm brightness to 0
led_values = {'1': 0, '2': 0, '3': 0}

#set up PWM
pwm_leds = {}
for key, pin in led_pins.items():
    GPIO.setup(pin, GPIO.OUT)
    pwm = GPIO.PWM(pin, 1000)
    pwm.start(0)
    pwm_leds[key] = pwm

#HTML page -> generated by ChatGPT
def html_page():
    return f"""HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>LED Brightness Control</title>
<style>
    body {{
        font-family: Arial, sans-serif;
        margin: 40px;
    }}
    .control-box {{
        border: 2px solid black;
        padding: 15px;
        width: 260px;
        border-radius: 8px;
    }}
    .led-control {{
        display: flex;
        align-items: center;
        margin-bottom: 12px;
    }}
    .led-label {{
        width: 50px;
        font-weight: bold;
    }}
    input[type="range"] {{
        flex-grow: 1;
        margin: 0 10px;
    }}
    .value-display {{
        width: 30px;
        text-align: right;
        font-weight: bold;
    }}
</style>
</head>
<body>
    <div class="control-box">
        <div class="led-control">
            <span class="led-label">LED1</span>
            <input type="range" id="led1" min="0" max="100" value="{led_values['1']}" oninput="updateLED(1)">
            <span id="val1" class="value-display">{led_values['1']}</span>
        </div>
        <div class="led-control">
            <span class="led-label">LED2</span>
            <input type="range" id="led2" min="0" max="100" value="{led_values['2']}" oninput="updateLED(2)">
            <span id="val2" class="value-display">{led_values['2']}</span>
        </div>
        <div class="led-control">
            <span class="led-label">LED3</span>
            <input type="range" id="led3" min="0" max="100" value="{led_values['3']}" oninput="updateLED(3)">
            <span id="val3" class="value-display">{led_values['3']}</span>
        </div>
    </div>

<script>
function updateLED(ledNum) {{
    let slider = document.getElementById("led" + ledNum);
    let valueDisplay = document.getElementById("val" + ledNum);
    let brightness = slider.value;
    valueDisplay.textContent = brightness;

    fetch("/", {{
        method: "POST",
        headers: {{
            "Content-Type": "application/x-www-form-urlencoded"
        }},
        body: "led=" + ledNum + "&brightness=" + brightness
    }});
}}
</script>
</body>
</html>"""

#read and parse data from POST request -> Lecture 7, slide 20
def parsePOSTdata(data):
    try:
        data_dict = {}
        idx = data.find('\r\n\r\n')+4
        data = data[idx:]
        data_pairs = data.split('&')
        for pair in data_pairs:
            key_val = pair.split('=')
            if len(key_val) == 2:
                data_dict[key_val[0]] = key_val[1]
        return data_dict
        
    except Exception:
        return {}

#function to create host server at Pi ip address -> Lec 7, slide 7
def run_server(host="", port=8080): #port 8080 -> non privilaged alternative to 80
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #create a socket
    s.bind((host, port)) #host IP address through the given PORT
    s.listen(1) # Listen for up to 1 queued connections
    #Print my Pi's IP address and link to control LEDs
    print("Visit http://172.20.10.8:8080 in your browser.")

    while True:
        conn, addr = s.accept() # Accept connection
        with conn:
            data = conn.recv(2048).decode("utf-8") # Receive up to 1024 bytes from client
            if not data:
                continue

            #Collect and parse through data
            if data.startswith("POST"):
                params = parsePOSTdata(data)
                led = params.get("led", "1")
                brightness = params.get("brightness", "0")

                try:
                    #Change duty cycle based on percantage value from slider
                    brightness = int(brightness)
                    brightness = max(0, min(100, brightness))
                    led_values[led] = brightness
                    pwm_leds[led].ChangeDutyCycle(brightness)
                    print(f"LED {led} set to {brightness}% brightness")
                except Exception as e:
                    print("POST parse error:", e)

                # Respond minimally to JS (no page reload)
                conn.sendall(b"HTTP/1.1 204 No Content\r\n\r\n")

            else:  # send updated HTML page
                response = html_page()
                conn.sendall(response.encode("utf-8"))

#Run the Main code
if __name__ == "__main__":
    try:
        run_server()
    except KeyboardInterrupt:
        print("\nExiting")
    finally:
        for pwm in pwm_leds.values():
            pwm.stop()
        GPIO.cleanup()
